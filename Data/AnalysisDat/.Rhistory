#slope1
#slope2
#transfer
#knot
#inter                                           )
muVec <- c(0.1, -0.02, 2, 2, -2 )
sdVec <- c(0.001, 0.002, 0.5, 0.5, 1)
sdMat <- diag(sdVec)
covMat <- sqrt(sdMat) %*% corrMat %*% sqrt(sdMat)
#------/Variables--------------------------------------------------------
#------Generating Core Vars----------------------------------------------
coreVars <- mvrnorm(n = n,
mu = muVec,
Sigma = covMat)
#------Variables---------------------------------------------------------
n <- 300 #number of participants
n_sessions <- 20 #number of sessions
corrMat <- matrix(c(   1,  -0.5,   0.01,   -0.8,    -0.7,
-0.5,   1,     0.7,     0.1,    -0.01,
0.01,   0.7,   1,      -0.4,    -0.15,
-0.8,   0.1,  -0.4,     1,       0.2,
-0.7,   -0.1, -0.15,     0.2,     1), nrow = 5)
#c(       slope1 slope2 transfer knot inter
#slope1
#slope2
#transfer
#knot
#inter                                           )
muVec <- c(0.1, -0.02, 2, 2, -2 )
sdVec <- c(0.001, 0.002, 0.5, 0.5, 1)
sdMat <- diag(sdVec)
covMat <- sqrt(sdMat) %*% corrMat %*% sqrt(sdMat)
#------/Variables--------------------------------------------------------
#------Generating Core Vars----------------------------------------------
coreVars <- mvrnorm(n = n,
mu = muVec,
Sigma = covMat)
n <- 300 #number of participants
n_sessions <- 20 #number of sessions
corrMat <- matrix(c(   1,  -0.5,   0.01,   -0.8,    -0.7,
-0.5,   1,     0.7,     0.1,    -0.01,
0.01,   0.7,   1,      -0.4,    -0.05,
-0.8,   0.1,  -0.4,     1,       0.2,
-0.7,   -0.01,-0.05,     0.2,     1), nrow = 5)
#c(       slope1 slope2 transfer knot inter
#slope1
#slope2
#transfer
#knot
#inter                                           )
muVec <- c(0.1, -0.02, 2, 2, -2 )
sdVec <- c(0.001, 0.002, 0.5, 0.5, 1)
sdMat <- diag(sdVec)
covMat <- sqrt(sdMat) %*% corrMat %*% sqrt(sdMat)
#------/Variables--------------------------------------------------------
#------Generating Core Vars----------------------------------------------
coreVars <- mvrnorm(n = n,
mu = muVec,
Sigma = covMat)
n <- 300 #number of participants
n_sessions <- 20 #number of sessions
corrMat <- matrix(c(   1,  -0.5,   0.01,   -0.8,    -0.7,
-0.5,   1,      0.7,     0.1,    0.01,
0.01,   0.7,      1,      -0.4,    0.05,
-0.8,   0.1,   -0.4,     1,       0.2,
-0.7,  0.01,   0.05,     0.2,      1), nrow = 5)
#c(       slope1 slope2 transfer knot inter
#slope1
#slope2
#transfer
#knot
#inter                                           )
muVec <- c(0.1, -0.02, 2, 2, -2 )
sdVec <- c(0.001, 0.002, 0.5, 0.5, 1)
sdMat <- diag(sdVec)
covMat <- sqrt(sdMat) %*% corrMat %*% sqrt(sdMat)
#------/Variables--------------------------------------------------------
#------Generating Core Vars----------------------------------------------
coreVars <- mvrnorm(n = n,
mu = muVec,
Sigma = covMat)
hac <- function(df,cN,start = 1){
set.seed(123)
Clusters <- hclust(dist(df[start:cN]))
plot(Clusters, labels = F)
for (i in 2:9){
df[,paste0("C",i)] <- cutree(Clusters, i)
print(i)
print(mean(silhouette(df[,paste0("C",i)], dist(df[start:cN]))[,3]))
}
return(df)
}
em <- function(df, cN, start = 1){
mod <- Mclust(df[,start:cN])
df$emClass <- mod$classification
print("BIC is: ")
print(mod$bic)
return(df)
}
makekNNgraph <- function(df, k = 5, names = F){
d <- as.matrix(dist(df))
rnames <- rownames(df)
connections <- c()
for (i in 1:dim(d)[1]){
d[i,i] <- 999999999 #don't count self as match
indices <- which(d[,i] %in% sort(d[,i])[1:k])
indices <- indices[1:k] #incase theres too many
for (j in indices){
if (names){
connections <- c(connections, rnames[i], rnames[j])
} else {
connections <- c(connections, i, j)
}
}
}
connections <- as.character(connections)
graph <- graph(edges = connections,
n = dim(d)[1],
directed = F)
graph <- simplify(graph)
return(graph)
}
nbrClust <- function(graph, method = "vat", attackUpperBound = 5){
n <- vcount(graph)
print("finding attak set options...")
attacks <- lapply(1:attackUpperBound,
FUN = function(x) as.list(data.frame(combn(n,x))) print(x))
attacksTest <- do.call(c, attacks)
resilience <- function(graph, attackset){
V_S <- delete_vertices(graph, attackset)
comps <- components(V_S)
sCmax <- max(comps$csize)
sV <- vcount(graph)
sS <- length(attackset)
k <- length(comps$csize)
sV_S <- vcount(V_S)
integrity <- (sS + sCmax)/(sV)
vat <- (sS)/((sV_S - sCmax) +1)
toughness <- (sS)/k
return(list(integrity = integrity,
vat = vat,
toughness = toughness,
k = k,
attackset = attackset,
V_S = V_S))
}
print("testing attack sets...")
results <- lapply(attacksTest, function(x) resilience(graph,x))
print("almost done...")
res <- as.numeric(sapply(results, function(x) x[method]))
candidates <- which(res == min(res))
if (length(candidates) > 1){
optimalchoice <- results[[sample(candidates,1)]]
} else {
optimalchoice <- results[[candidates[1]]]
}
names(optimalchoice)
return(optimalchoice)
}
somDat <- function(n1,n2,df){
somMod <- som(scale(df[1:11]), grid = somgrid(n1,n2))
plot(somMod)
df[,paste0("som", n1, "_", n2)] <- somMod$unit.classif
return(list(model = somMod, dataFrame = df))
}
somDat2 <- function(n1,n2,df){
somMod <- som::som(df[1:11], n1, n2, init="linear", alpha=NULL, alphaType="inverse",
neigh="gaussian", topol="rect", radius=NULL, rlen=NULL, err.radius=1,
inv.alp.c=NULL)
df[,paste0("som", n1, "_",n2)] <- paste0(somMod$visual$x,somMod$visual$y)
return(list(model = somMod, dataFrame = df))
}
#dataLoad-------------------------------------------------
setwd("/Users/chelseaparlett/Desktop/Desktop/Github/BaseBall/Data/AnalysisDat")
d <- read.csv("OldPitch.csv")
select <- names(d) %in% c("C2","C3","C4",
"C5","C6","C7",
"C8","C9")
d <- d[, !select ]
d2 <- data.frame(lapply(d[,3:13],scale))
d2$name <- d$name
#HAC------------------------------------------------------
hDat <- hac(d2, cN = 11, start = 1)
#EM-------------------------------------------------------
#mDat <- em(d2,dim(d2)[2]-1)
#NBRC------------------------------------------------------
rownames(d2) <- d2$name
knnBB <- makekNNgraph(d2[1:11], names = T)
nbrcBB <- nbrClust(knnBB, method = "integrity", attackUpperBound = 7)
#libraries----------------------------------------------
library(scales)
library(DescTools)
library(tidyr)
library(tidyverse)
library(dplyr)             # data manipulation
library(cluster)           # clustering algorithms
require(ggplot2)
library(ggiraph)           # radar graphs
require(plyr)
require(reshape2)
library(ggiraphExtra)      # radar graphs
library(seewave)           #KLDIVERGENCE
library(mclust)            # EM with GMM
library(car)
library(MVN)
library(caret)
library(gridExtra)
library(class)
library(MASS)
library(kohonen)          # SOMs
library(igraph)           # for NBRC
library(ggraph)           # for NBRC
library(som)              # SOMs round 2
hac <- function(df,cN,start = 1){
set.seed(123)
Clusters <- hclust(dist(df[start:cN]))
plot(Clusters, labels = F)
for (i in 2:9){
df[,paste0("C",i)] <- cutree(Clusters, i)
print(i)
print(mean(silhouette(df[,paste0("C",i)], dist(df[start:cN]))[,3]))
}
return(df)
}
em <- function(df, cN, start = 1){
mod <- Mclust(df[,start:cN])
df$emClass <- mod$classification
print("BIC is: ")
print(mod$bic)
return(df)
}
makekNNgraph <- function(df, k = 5, names = F){
d <- as.matrix(dist(df))
rnames <- rownames(df)
connections <- c()
for (i in 1:dim(d)[1]){
d[i,i] <- 999999999 #don't count self as match
indices <- which(d[,i] %in% sort(d[,i])[1:k])
indices <- indices[1:k] #incase theres too many
for (j in indices){
if (names){
connections <- c(connections, rnames[i], rnames[j])
} else {
connections <- c(connections, i, j)
}
}
}
connections <- as.character(connections)
graph <- graph(edges = connections,
n = dim(d)[1],
directed = F)
graph <- simplify(graph)
return(graph)
}
nbrClust <- function(graph, method = "vat", attackUpperBound = 5){
n <- vcount(graph)
print("finding attak set options...")
attacks <- lapply(1:attackUpperBound,
FUN = function(x) as.list(data.frame(combn(n,x))) print(x))
attacksTest <- do.call(c, attacks)
resilience <- function(graph, attackset){
V_S <- delete_vertices(graph, attackset)
comps <- components(V_S)
sCmax <- max(comps$csize)
sV <- vcount(graph)
sS <- length(attackset)
k <- length(comps$csize)
sV_S <- vcount(V_S)
integrity <- (sS + sCmax)/(sV)
vat <- (sS)/((sV_S - sCmax) +1)
toughness <- (sS)/k
return(list(integrity = integrity,
vat = vat,
toughness = toughness,
k = k,
attackset = attackset,
V_S = V_S))
}
print("testing attack sets...")
results <- lapply(attacksTest, function(x) resilience(graph,x))
print("almost done...")
res <- as.numeric(sapply(results, function(x) x[method]))
candidates <- which(res == min(res))
if (length(candidates) > 1){
optimalchoice <- results[[sample(candidates,1)]]
} else {
optimalchoice <- results[[candidates[1]]]
}
names(optimalchoice)
return(optimalchoice)
}
somDat <- function(n1,n2,df){
somMod <- som(scale(df[1:11]), grid = somgrid(n1,n2))
plot(somMod)
df[,paste0("som", n1, "_", n2)] <- somMod$unit.classif
return(list(model = somMod, dataFrame = df))
}
somDat2 <- function(n1,n2,df){
somMod <- som::som(df[1:11], n1, n2, init="linear", alpha=NULL, alphaType="inverse",
neigh="gaussian", topol="rect", radius=NULL, rlen=NULL, err.radius=1,
inv.alp.c=NULL)
df[,paste0("som", n1, "_",n2)] <- paste0(somMod$visual$x,somMod$visual$y)
return(list(model = somMod, dataFrame = df))
}
###########################################################
#CLUSTERING
###########################################################
#HAC------------------------------------------------------
hDat <- hac(d2, cN = 11, start = 1)
rownames(d2) <- d2$name
knnBB <- makekNNgraph(d2[1:11], names = T)
nbrcBB <- nbrClust(knnBB, method = "integrity", attackUpperBound = 7)
nbrClust <- function(graph, method = "vat", attackUpperBound = 5){
n <- vcount(graph)
print("finding attak set options...")
attacks <- lapply(1:attackUpperBound,
FUN = function(x) as.list(data.frame(combn(n,x))) print(x))
attacksTest <- do.call(c, attacks)
resilience <- function(graph, attackset){
V_S <- delete_vertices(graph, attackset)
comps <- components(V_S)
sCmax <- max(comps$csize)
sV <- vcount(graph)
sS <- length(attackset)
k <- length(comps$csize)
sV_S <- vcount(V_S)
integrity <- (sS + sCmax)/(sV)
vat <- (sS)/((sV_S - sCmax) +1)
toughness <- (sS)/k
return(list(integrity = integrity,
vat = vat,
toughness = toughness,
k = k,
attackset = attackset,
V_S = V_S))
}
print("testing attack sets...")
results <- lapply(attacksTest, function(x) resilience(graph,x))
print("almost done...")
res <- as.numeric(sapply(results, function(x) x[method]))
candidates <- which(res == min(res))
if (length(candidates) > 1){
optimalchoice <- results[[sample(candidates,1)]]
} else {
optimalchoice <- results[[candidates[1]]]
}
names(optimalchoice)
return(optimalchoice)
}
nbrClust <- function(graph, method = "vat", attackUpperBound = 5){
n <- vcount(graph)
print("finding attak set options...")
attacks <- lapply(1:attackUpperBound,
FUN = function(x) as.list(data.frame(combn(n,x))) print(x))
attacksTest <- do.call(c, attacks)
resilience <- function(graph, attackset){
V_S <- delete_vertices(graph, attackset)
comps <- components(V_S)
sCmax <- max(comps$csize)
sV <- vcount(graph)
sS <- length(attackset)
k <- length(comps$csize)
sV_S <- vcount(V_S)
integrity <- (sS + sCmax)/(sV)
vat <- (sS)/((sV_S - sCmax) +1)
toughness <- (sS)/k
return(list(integrity = integrity,
vat = vat,
toughness = toughness,
k = k,
attackset = attackset,
V_S = V_S))
}
print("testing attack sets...")
results <- lapply(attacksTest, function(x) resilience(graph,x))
print("almost done...")
res <- as.numeric(sapply(results, function(x) x[method]))
candidates <- which(res == min(res))
if (length(candidates) > 1){
optimalchoice <- results[[sample(candidates,1)]]
} else {
optimalchoice <- results[[candidates[1]]]
}
names(optimalchoice)
return(optimalchoice)
}
nbrClust <- function(graph, method = "vat", attackUpperBound = 5){
n <- vcount(graph)
print("finding attak set options...")
attacks <- lapply(1:attackUpperBound,
FUN = function(x) as.list(data.frame(combn(n,x))) print(x))
attacksTest <- do.call(c, attacks)
resilience <- function(graph, attackset){
V_S <- delete_vertices(graph, attackset)
comps <- components(V_S)
sCmax <- max(comps$csize)
sV <- vcount(graph)
sS <- length(attackset)
k <- length(comps$csize)
sV_S <- vcount(V_S)
integrity <- (sS + sCmax)/(sV)
vat <- (sS)/((sV_S - sCmax) +1)
toughness <- (sS)/k
return(list(integrity = integrity,
vat = vat,
toughness = toughness,
k = k,
attackset = attackset,
V_S = V_S))
}
print("testing attack sets...")
results <- lapply(attacksTest, function(x) resilience(graph,x))
print("almost done...")
res <- as.numeric(sapply(results, function(x) x[method]))
candidates <- which(res == min(res))
if (length(candidates) > 1){
optimalchoice <- results[[sample(candidates,1)]]
} else {
optimalchoice <- results[[candidates[1]]]
}
names(optimalchoice)
return(optimalchoice)
}
graph <- knnBB
method = "vat"
attackUpperBound = 5
n <- vcount(graph)
print("finding attak set options...")
attacks <- lapply(1:attackUpperBound,
FUN = function(x) as.list(data.frame(combn(n,x))) print(x))
attacksTest <- do.call(c, attacks)
?combn
trythis <- function(x){
as.list(data.frame(combn(n,x)))
print(x)
}
trythis <- function(x){
as.list(data.frame(combn(n,x)))
print(x)
}
attacks <- lapply(1:attackUpperBound,
FUN = function(x) trythis(n,x))
attacksTest <- do.call(c, attacks)
graph <- knnBB
method = "vat"
attackUpperBound = 5
n <- vcount(graph)
print("finding attak set options...")
trythis <- function(n,x){
as.list(data.frame(combn(n,x)))
print(x)
}
attacks <- lapply(1:attackUpperBound,
FUN = function(x) trythis(n,x))
nbrClust <- function(graph, method = "vat", attackUpperBound = 5){
graph <- knnBB
method = "vat"
attackUpperBound = 5
n <- vcount(graph)
print("finding attak set options...")
trythis <- function(n,x){
as.list(data.frame(combn(n,x)))
print(x)
}
attacks <- lapply(1:attackUpperBound,
FUN = function(x) trythis(n,x))
attacksTest <- do.call(c, attacks)
resilience <- function(graph, attackset){
V_S <- delete_vertices(graph, attackset)
comps <- components(V_S)
sCmax <- max(comps$csize)
sV <- vcount(graph)
sS <- length(attackset)
k <- length(comps$csize)
sV_S <- vcount(V_S)
integrity <- (sS + sCmax)/(sV)
vat <- (sS)/((sV_S - sCmax) +1)
toughness <- (sS)/k
return(list(integrity = integrity,
vat = vat,
toughness = toughness,
k = k,
attackset = attackset,
V_S = V_S))
}
print("testing attack sets...")
results <- lapply(attacksTest, function(x) resilience(graph,x))
print("almost done...")
res <- as.numeric(sapply(results, function(x) x[method]))
candidates <- which(res == min(res))
if (length(candidates) > 1){
optimalchoice <- results[[sample(candidates,1)]]
} else {
optimalchoice <- results[[candidates[1]]]
}
names(optimalchoice)
return(optimalchoice)
}
rownames(d2) <- d2$name
knnBB <- makekNNgraph(d2[1:11], names = T)
nbrcBB <- nbrClust(knnBB, method = "integrity", attackUpperBound = 7)
Q
?mapply
combn(114,2)
combn(114,5)
install.packages("gRbase", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(microbenchmark)
library(gRbase)
install.packages("RBGL", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(gRbase)
library(installr)
install.packages("installr", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
